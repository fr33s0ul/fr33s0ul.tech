<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>fr33s0ul</title><description>Cybersecurity, Technology, and CTFs</description><link>http://localhost:2368/</link><image><url>http://localhost:2368/favicon.png</url><title>fr33s0ul</title><link>http://localhost:2368/</link></image><generator>Ghost 3.12</generator><lastBuildDate>Thu, 02 Apr 2020 09:45:41 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>CherryBlossom CTF - write-up</title><description>&lt;p&gt;Hello all, this is my first write-up at this page If you see anything not right or have any corrections I would be very happy getting some feedback, anyways lets start our write-up, Today we'll review a CTF challenge on &lt;a href="https://tryhackme.com/"&gt;TryHackme&lt;/a&gt; CherryBlossom. This challenge is rated hard and it focuses&lt;/p&gt;</description><link>http://localhost:2368/cherryblossom-ctf-write-up/</link><guid isPermaLink="false">5e8498785a6fba01623b5688</guid><dc:creator>fr33s0ul</dc:creator><pubDate>Wed, 01 Apr 2020 13:42:48 GMT</pubDate><media:content url="http://localhost:2368/content/images/2020/04/cherryCTF-1.png" medium="image"/><content:encoded>&lt;img src="http://localhost:2368/content/images/2020/04/cherryCTF-1.png" alt="CherryBlossom CTF - write-up"&gt;&lt;p&gt;Hello all, this is my first write-up at this page If you see anything not right or have any corrections I would be very happy getting some feedback, anyways lets start our write-up, Today we'll review a CTF challenge on &lt;a href="https://tryhackme.com/"&gt;TryHackme&lt;/a&gt; CherryBlossom. This challenge is rated hard and it focuses on file manipulation and cryptography.&lt;/p&gt;&lt;blockquote&gt;First of all we will start enumerating the machine&lt;/blockquote&gt;&lt;!--kg-card-begin: markdown--&gt;&lt;p&gt;nmap -sC -sV &lt;strong&gt;{target-host}&lt;/strong&gt;&lt;/p&gt;
&lt;!--kg-card-end: markdown--&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2020/04/Screenshot-2020-04-01-at-11.03.30.png" class="kg-image" alt="CherryBlossom CTF - write-up"&gt;&lt;/figure&gt;&lt;p&gt;we can see that there's three open ports 22 for SSH and 139-445 used by Samba, so far we have nothing except the samba, let's move on and scan the smb&lt;/p&gt;&lt;!--kg-card-begin: markdown--&gt;&lt;p&gt;nmap --script smb-enum-shares -vv &lt;strong&gt;{target-host}&lt;/strong&gt;&lt;/p&gt;
&lt;!--kg-card-end: markdown--&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2020/04/Screenshot-2020-04-01-at-11.19.45.png" class="kg-image" alt="CherryBlossom CTF - write-up"&gt;&lt;/figure&gt;&lt;p&gt;and here we have something, an Anonymous file shared which means we can dig in with anonymous account and we may find something interesting.&lt;/p&gt;&lt;!--kg-card-begin: markdown--&gt;&lt;p&gt;smbclient \\&lt;strong&gt;{target-host}&lt;/strong&gt;\Anonymous&lt;/p&gt;
&lt;!--kg-card-end: markdown--&gt;&lt;p&gt;we found a text file &lt;strong&gt;journal.txt &lt;/strong&gt;and when we open it, it contains a huge base64.&lt;/p&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2020/04/Screenshot-2020-04-01-at-11.19.58.png" class="kg-image" alt="CherryBlossom CTF - write-up"&gt;&lt;/figure&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2020/04/Screenshot-2020-04-01-at-11.20.49.png" class="kg-image" alt="CherryBlossom CTF - write-up"&gt;&lt;/figure&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2020/04/Screenshot-2020-04-01-at-11.21.41.png" class="kg-image" alt="CherryBlossom CTF - write-up"&gt;&lt;/figure&gt;&lt;p&gt;Decoding it give us an image, Let's save it as a png. After checking it with the command &lt;strong&gt;file&lt;/strong&gt;, it is a PNG.&lt;/p&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2020/04/Screenshot-2020-04-01-at-11.21.51.png" class="kg-image" alt="CherryBlossom CTF - write-up"&gt;&lt;/figure&gt;&lt;p&gt;Usually in Steganography challenges Jpeg are commonly ¬†used, Steghide won't be able to work on this PNG which means we will need to use another tool called &lt;a href="https://github.com/dhsdshdhk/stegpy"&gt;stegpy&lt;/a&gt;, It easy to install all you have to do is &lt;strong&gt;pip3 install stegpy &lt;/strong&gt;and let's see what's hidden there&lt;/p&gt;&lt;!--kg-card-begin: markdown--&gt;&lt;p&gt;stegpy &lt;strong&gt;{file}&lt;/strong&gt;&lt;/p&gt;
&lt;!--kg-card-end: markdown--&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2020/04/Screenshot-2020-04-01-at-12.13.52.png" class="kg-image" alt="CherryBlossom CTF - write-up"&gt;&lt;/figure&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2020/04/Screenshot-2020-04-01-at-12.14.17.png" class="kg-image" alt="CherryBlossom CTF - write-up"&gt;&lt;/figure&gt;&lt;p&gt;we got a zip file! Unfortunately it look like our file is corrupted, Let's check the hex of the file to see if something is wrong with the tag &lt;/p&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2020/04/Screenshot-2020-04-01-at-12.15.47.png" class="kg-image" alt="CherryBlossom CTF - write-up"&gt;&lt;/figure&gt;&lt;p&gt;as it is provided in the picture it doesn't look fine, let's change it to what it's supposed to be &lt;strong&gt;50 4B 03 04&lt;/strong&gt;&lt;/p&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2020/04/Screenshot-2020-04-01-at-12.16.34.png" class="kg-image" alt="CherryBlossom CTF - write-up"&gt;&lt;/figure&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2020/04/Screenshot-2020-04-01-at-12.17.14.png" class="kg-image" alt="CherryBlossom CTF - write-up"&gt;&lt;/figure&gt;&lt;p&gt;exit and save, it works! if you have the password üò∂, Let's move on and extract that hash from the file, I will use fcrackzip to decrypt it but feel free to use whatever you like.&lt;/p&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2020/04/Screenshot-2020-04-01-at-12.20.13-1.png" class="kg-image" alt="CherryBlossom CTF - write-up"&gt;&lt;/figure&gt;&lt;p&gt;after decrypting the zip file, found an Encrypted Cherrytree document, one of the good ways to store data and diaries ... , if we use the command &lt;strong&gt;file&lt;/strong&gt; to check it, it will tell us that it's a 7z file, so let's &lt;strong&gt;7z2john&lt;/strong&gt; this baby file.&lt;/p&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2020/04/Screenshot-2020-04-01-at-12.24.06.png" class="kg-image" alt="CherryBlossom CTF - write-up"&gt;&lt;/figure&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2020/04/Screenshot-2020-04-01-at-12.30.06-1.png" class="kg-image" alt="CherryBlossom CTF - write-up"&gt;&lt;/figure&gt;&lt;p&gt;the diaries and privacy he had is shared with us, So let's have a look at what we've got there.&lt;/p&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2020/04/Screenshot-2020-04-01-at-12.41.42.png" class="kg-image" alt="CherryBlossom CTF - write-up"&gt;&lt;/figure&gt;&lt;p&gt;I exported the most interesting thing he had a wordlist called cherry-bolossm üçí and we got a username , this is getting fun now. Let's brute force the user &lt;strong&gt;lily &lt;/strong&gt;password with the wordlist we exported from the file.&lt;/p&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2020/04/Screenshot-2020-04-01-at-12.53.16.png" class="kg-image" alt="CherryBlossom CTF - write-up"&gt;&lt;/figure&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2020/04/Screenshot-2020-04-01-at-13.02.25.png" class="kg-image" alt="CherryBlossom CTF - write-up"&gt;&lt;/figure&gt;&lt;p&gt;Welcome, Lily! üòä what a fun way we got this user, let's not get lost now and focus on our box.&lt;/p&gt;&lt;p&gt;There's no user flag because there's another user that have the flag and then the root! we got to pivot üòé the username is &lt;strong&gt;Johan&lt;/strong&gt;. Let's browse on this machine.&lt;/p&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2020/04/Screenshot-2020-04-01-at-13.03.31.png" class="kg-image" alt="CherryBlossom CTF - write-up"&gt;&lt;/figure&gt;&lt;p&gt;the &lt;strong&gt;shadow.bak&lt;/strong&gt; ¬†can be read by us which means we have something to get us to Mr Johan.&lt;/p&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2020/04/Screenshot-2020-04-01-at-13.04.08-2.png" class="kg-image" alt="CherryBlossom CTF - write-up"&gt;&lt;/figure&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2020/04/Screenshot-2020-04-01-at-13.06.37.png" class="kg-image" alt="CherryBlossom CTF - write-up"&gt;&lt;/figure&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2020/04/Screenshot-2020-04-01-at-13.08.38.png" class="kg-image" alt="CherryBlossom CTF - write-up"&gt;&lt;/figure&gt;&lt;p&gt;Et Voila, we decrypted the hash successfully and jumped from user lily to johan with the command:&lt;/p&gt;&lt;blockquote&gt;sudo -u johan&lt;/blockquote&gt;&lt;p&gt;we typed the password we got and we have the user flag, now what. We need to get root priv, first thing I do when I'm trying to privesc &lt;strong&gt;sudo -l &lt;/strong&gt;to see if the user is allowed to use anything as root and try to gain access with the power he got.&lt;/p&gt;&lt;p&gt;when I tried to type the password we got prompted to johan, which is weird and very unusual unsafe unwhatever, all I know is that we have a &lt;strong&gt;pwdfeedback (pasword feedback) &lt;/strong&gt;issue which means we are using a vulnerable version of sudo, found out we have a (CVE-2019-18634) &lt;strong&gt;sudo buffer overflow&lt;/strong&gt;&lt;/p&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2020/04/Screenshot-2020-04-01-at-13.19.57.png" class="kg-image" alt="CherryBlossom CTF - write-up"&gt;&lt;/figure&gt;&lt;p&gt;tried what I read about in that CVE and our sudo version burped a Segmentation fault, which means we have a bufferoverflow over here ...&lt;/p&gt;&lt;blockquote&gt;talking about bufferoverflow if you don't understand the vulnerability here's a very good video linked&lt;/blockquote&gt;&lt;figure class="kg-card kg-embed-card"&gt;&lt;iframe width="480" height="270" src="https://www.youtube.com/embed/1S0aBV-Waeo?feature=oembed" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;&lt;/figure&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2020/04/Screenshot-2020-04-01-at-13.25.54.png" class="kg-image" alt="CherryBlossom CTF - write-up"&gt;&lt;/figure&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2020/04/Screenshot-2020-04-01-at-13.26.21.png" class="kg-image" alt="CherryBlossom CTF - write-up"&gt;&lt;/figure&gt;&lt;p&gt;I downloaded the exploit coded in C language, gave it permission to be executed and boom we got a root user, all we have to do now is go to /root/ directory and the file root.txt fill contain our flag and here you go you are no longer upset with your low privileges. &lt;/p&gt;&lt;p&gt;I really enjoyed this machine, learned many things the diary thing encryption, cryptography 101, backups are bad with wrong permissions, and png can contain files, ... and mostly to not forget and make it clear for anyone who comes and ask me if the bufferoverflow ... ¬†YES, they do still exist!!&lt;/p&gt;&lt;!--kg-card-begin: html--&gt;&lt;iframe src="https://giphy.com/embed/S3Ot3hZ5bcy8o" width="480" height="375" frameborder="0" class="giphy-embed" allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href="https://giphy.com/gifs/jack-nicholson-nodding-anger-management-S3Ot3hZ5bcy8o"&gt;&lt;/a&gt;&lt;/p&gt;&lt;!--kg-card-end: html--&gt;&lt;p&gt;The bufferoverflow thing continues to be a feature of the security landscape as long as we are still using C language. This is in no small part due to the significant issue of legacy code. An awful lot of C code still exists, including the kernel of every major operating system and popular libraries such as OpenSSL. Even if the doctors, I mean the developers want to use a safe language such as C#, they may need to depend on a third-party library written in C.&lt;/p&gt;&lt;!--kg-card-begin: html--&gt;&lt;iframe src="https://giphy.com/embed/ekvv0VTMS1fRNI6SW5" width="480" height="270" frameborder="0" class="giphy-embed" allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href="https://giphy.com/gifs/drivetribe-edd-drive-tribe-china-ekvv0VTMS1fRNI6SW5"&gt;&lt;/a&gt;&lt;/p&gt;&lt;!--kg-card-end: html--&gt;&lt;p&gt;Happy hacking! &lt;/p&gt;</content:encoded></item></channel></rss>